@using Newtonsoft.Json;
@model SilkFlo.Web.Models.Charts.vmChart
@{
    var lineChart = JsonConvert.SerializeObject(Model);
}
<div class="graphcard col-6 m-6  mt-2  border bg-light silkflo_tile">
    <div style="margin-bottom: 12px; float: right; font-size: 15px;">
        <span title="Refresh">
            <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 32 32" style="color:#A1A1AE;" onclick="refresh()">
                <path d="M 16 4 C 10.886719 4 6.617188 7.160156 4.875 11.625 L 6.71875 12.375 C 8.175781 8.640625 11.710938 6 16 6 C 19.242188 6 22.132813 7.589844 23.9375 10 L 20 10 L 20 12 L 27 12 L 27 5 L 25 5 L 25 8.09375 C 22.808594 5.582031 19.570313 4 16 4 Z M 25.28125 19.625 C 23.824219 23.359375 20.289063 26 16 26 C 12.722656 26 9.84375 24.386719 8.03125 22 L 12 22 L 12 20 L 5 20 L 5 27 L 7 27 L 7 23.90625 C 9.1875 26.386719 12.394531 28 16 28 C 21.113281 28 25.382813 24.839844 27.125 20.375 Z"></path>
            </svg>
        </span>




    </div>
    <h1 style="font-size: 19px;">Estimated Vs actual Benefits</h1>
    <h3 class="lblUpdate">
        Updated 12 min ago.
    </h3>
    <button class="btnbadge btnFailed">Deploved</button>
    <button class="btnbadge btnSuccess">Estimated</button>
   
    <canvas id="@Model.ChartName"></canvas>
</div>



   

<script>

    var lineChartViewModel = @Html.Raw(lineChart);
    var ctx = document.getElementById(lineChartViewModel.ChartName).getContext('2d');
 
    var lineChart = new Chart(ctx, {
        type: lineChartViewModel.strType,
        height: lineChartViewModel.Height,
        width: lineChartViewModel.Width,
        responsive: lineChartViewModel.Responsive,
        animation: lineChartViewModel.Animation,
       
        data: {
            labels: lineChartViewModel.Labels,
            datasets: lineChartViewModel.data.map(function (dataset) {
                return {
                    label: dataset.Label,
                    data: dataset.Data,
                    backgroundColor: dataset.BackgroundColor,
                    borderColor: dataset.BorderColor,
                    borderWidth: dataset.BorderWidth,
                    fill: dataset.Fill,
                    tension: dataset.Tension,
                    //events: dataset.Event[0],
                    //scales: {
                    //    y: dataset.Scales[0].yAxes.map(function (scale) {
                    //        return {
                    //            beginAtZero: scale.Ticks.BeginAtZero
                    //            // Other y-axis scale options...
                    //        };
                    //    }),
                    //    x: dataset.data[0].Scales.xAxes.map(function (scale) {
                    //        return {
                    //            beginAtZero: scale.Ticks.BeginAtZero
                    //            // Other x-axis scale options...
                    //        };
                    //    })
                    //}
                };
            })
        },
      
    });
</script>
